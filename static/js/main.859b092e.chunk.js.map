{"version":3,"sources":["index.js"],"names":["Square","props","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","onClick","value","Board","_this","Object","C_proj_REACT_gomoku_react_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","C_proj_REACT_gomoku_react_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","C_proj_REACT_gomoku_react_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","state","squares","Array","fill","xIsNext","i","slice","calculateWinner","setState","_this2","handleClick","status","winner","rows","y","row","x","push","renderSquare","map","r","React","Component","Game","lines","length","_lines$i","C_proj_REACT_gomoku_react_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","b","c","ReactDOM","render","document","getElementById"],"mappings":"oLAOA,SAASA,EAAOC,GACd,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASC,QAASL,EAAMK,SACvCL,EAAMM,WAKPC,cACJ,SAAAA,EAAYP,GAAO,IAAAQ,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMX,KACDe,MAAQ,CACXC,QAASC,MAAM,GAAGC,KAAK,MACvBC,SAAS,GAJMX,2EAQPY,GACV,IAAMJ,EAAUL,KAAKI,MAAMC,QAAQK,QAC/BC,EAAgBN,IAAYA,EAAQI,KAGxCJ,EAAQI,GAAKT,KAAKI,MAAMI,QAAU,IAAM,IACxCR,KAAKY,SAAS,CACZP,QAASA,EACTG,SAAUR,KAAKI,MAAMI,gDAIZC,GAAG,IAAAI,EAAAb,KACd,OAAOV,EAAAC,EAAAC,cAACJ,EAAD,CAAQO,MAAOK,KAAKI,MAAMC,QAAQI,GAAIf,QAAS,kBAAMmB,EAAKC,YAAYL,uCAI7E,IACIM,EADEC,EAASL,EAAgBX,KAAKI,MAAMC,SAGxCU,EADEC,EACO,WAAaA,EAEb,iBAAmBhB,KAAKI,MAAMI,QAAU,IAAM,KASzD,IAHA,IAEMS,EAAO,GACJC,EAAI,EAAGA,EAHA,GAGaA,IAAK,CAEhC,IADA,IAAIC,EAAM,GACDC,EAAI,EAAGA,EALF,GAKeA,IAC3BD,EAAIE,KAAKrB,KAAKsB,aAAaF,EANf,GAMmBF,IAEjCD,EAAKI,KAAKF,GAIZ,OACE7B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUsB,GACxBE,EAAKM,IAAI,SAAAC,GAAC,OACTlC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAa+B,aArDlBC,IAAMC,WA4DpBC,mLAEF,OACErC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAACI,EAAD,OAEFN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,oBATSiC,IAAMC,WAoBzB,SAASf,EAAgBN,GAEvB,IADA,IAAMuB,EAAQ,CAAC,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,IAC1FnB,EAAI,EAAGA,EAAImB,EAAMC,OAAQpB,IAAK,KAAAqB,EAAAhC,OAAAiC,EAAA,EAAAjC,CACnB8B,EAAMnB,GADa,GAC9BlB,EAD8BuC,EAAA,GAC3BE,EAD2BF,EAAA,GACxBG,EADwBH,EAAA,GAErC,GAAIzB,EAAQd,IAAMc,EAAQd,KAAOc,EAAQ2B,IAAM3B,EAAQd,KAAOc,EAAQ4B,GACpE,OAAO5B,EAAQd,GAGnB,OAAO,KAVT2C,IAASC,OAAO7C,EAAAC,EAAAC,cAACmC,EAAD,MAAUS,SAASC,eAAe","file":"static/js/main.859b092e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\n/* @component: Square\r\n   fully controlled by <Square>\r\n   */\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      squares: Array(9).fill(null),\r\n      xIsNext: true\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const squares = this.state.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      squares: squares,\r\n      xIsNext: !this.state.xIsNext\r\n    });\r\n  }\r\n\r\n  renderSquare(i) {\r\n    return <Square value={this.state.squares[i]} onClick={() => this.handleClick(i)} />;\r\n  }\r\n\r\n  render() {\r\n    const winner = calculateWinner(this.state.squares);\r\n    let status;\r\n    if (winner) {\r\n      status = \"Winner: \" + winner;\r\n    } else {\r\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n    }\r\n\r\n    /* Build a board of rowSize x rowSize. squares are numbered from 0 -> (rowSize^^2)-1\r\n       We create each row[] and push to rows[]\r\n    */\r\n    const rowSize = 19;\r\n\r\n    const rows = [];\r\n    for (let y = 0; y < rowSize; y++) {\r\n      let row = [];\r\n      for (let x = 0; x < rowSize; x++) {\r\n        row.push(this.renderSquare(x + y * rowSize));\r\n      }\r\n      rows.push(row);\r\n    }\r\n\r\n    // Draw the rowSize x rowSize board\r\n    return (\r\n      <div>\r\n        <div className=\"status\">{status}</div>\r\n        {rows.map(r => (\r\n          <div className=\"board-row\">{r}</div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{/* status */}</div>\r\n          <ol>{/* TODO */}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n"],"sourceRoot":""}