{"version":3,"sources":["index.js"],"names":["Square","props","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","onClick","value","Board","_this","Object","C_proj_REACT_gomoku_react_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","C_proj_REACT_gomoku_react_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","C_proj_REACT_gomoku_react_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","state","squares","Array","rowSize","fill","xMovesNext","ruleset","i","slice","isGameWon","setState","_this2","key","handleClick","rows","y","row","x","push","renderSquare","winner","status","BuildBoard","map","r","React","Component","Game","_this3","gameOver","gameType","arguments","length","undefined","lines","_lines$i","C_proj_REACT_gomoku_react_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","b","c","console","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c727f7dd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\n/* @component: Square\r\n */\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // Create empty board arry; 'X' moves first; TBD: set ruleset\r\n      squares: Array(this.props.rowSize * this.props.rowSize).fill(null),\r\n      xMovesNext: true,\r\n      ruleset: props.ruleset\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const squares = this.state.squares.slice();\r\n    if (squares[i] || isGameWon(squares)) {\r\n      //occupied square or gameover\r\n      return;\r\n    }\r\n    squares[i] = this.state.xMovesNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      squares: squares,\r\n      xMovesNext: !this.state.xMovesNext\r\n    });\r\n  }\r\n\r\n  renderSquare(i) {\r\n    return <Square key={i} value={this.state.squares[i]} onClick={() => this.handleClick(i)} />;\r\n  }\r\n\r\n  /**\r\n    Build a board of rowSize x rowSize. squares are numbered from 0 -> (rowSize^^2)-1\r\n    We create each row[] and push to rows[]\r\n  */\r\n  BuildBoard(rowSize) {\r\n    const rows = [];\r\n    for (let y = 0; y < rowSize; y++) {\r\n      let row = [];\r\n      for (let x = 0; x < rowSize; x++) {\r\n        row.push(this.renderSquare(x + y * rowSize));\r\n      }\r\n      rows.push(row);\r\n    }\r\n    return rows;\r\n  }\r\n\r\n  render() {\r\n    let winner = isGameWon(this.state.squares, this.state.ruleset);\r\n    //if (winner) this.setState({ gameOver: 1 });\r\n\r\n    let status = \"\";\r\n    if (winner) {\r\n      status = \"Winner: \" + winner;\r\n      // this.setState({ gameOver: 1 });  //causes loop\r\n    } else {\r\n      status = \"Next player: \" + (this.state.xMovesNext ? \"X\" : \"O\");\r\n    }\r\n    // Draw the rowSize x rowSize board\r\n    const rows = this.BuildBoard(this.props.rowSize);\r\n\r\n    let x = 0;\r\n    return (\r\n      <div>\r\n        <div className=\"status\">{status}</div>\r\n        {rows.map(r => (\r\n          <div key={r + x++} className=\"board-row\">\r\n            {r}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      gameOver: 0,\r\n      gameType: \"tictactoe\"\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board ruleset={this.state.gameType} key=\"board\" rowSize={3} />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{/* status */}</div>\r\n          <ol>{/* TODO */}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n\r\n/* If game is won, return name of winner, else 0\r\nReally, should break these out into game modules and each game returns isGameWon(), etc\r\n*/\r\nfunction isGameWon(squares, ruleset = \"tictactoe\") {\r\n  //default val temporary\r\n  if (ruleset === \"tictactoe\") {\r\n    // This is tictactoe logic only. Great for TTT, sucks for Go-moku.\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n      [20, 21, 22]\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n      }\r\n    }\r\n  } else {\r\n    console.log(\"Unknown ruleset\");\r\n  }\r\n  // other game modes follow here...else if....\r\n  return null;\r\n}\r\n"],"sourceRoot":""}